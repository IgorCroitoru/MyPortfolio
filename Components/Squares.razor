@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<canvas @ref="canvasRef" class="@(Class + " block h-full w-full border-none")"></canvas>

@code {
    private ElementReference canvasRef;
    private DotNetObjectReference<Squares>? objRef;
    private IJSObjectReference? module;
    private bool isInitialized = false;

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string Direction { get; set; } = "right";

    [Parameter]
    public double Speed { get; set; } = 1;

    [Parameter]
    public string BorderColor { get; set; } = "#999";

    [Parameter]
    public int SquareSize { get; set; } = 40;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string HoverFillColor { get; set; } = "#222";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("initialize", canvasRef, objRef,
                Direction, Speed, BorderColor, SquareSize, HoverFillColor);
            isInitialized = true;
        }
        else if (isInitialized)
        {
            await JSRuntime.InvokeVoidAsync("updateParameters",
                Direction, Speed, BorderColor, SquareSize, HoverFillColor);
        }
    }

    [JSInvokable]
    public void OnHover(int x, int y)
    {
        // You can handle hover events in C# if needed
    }

    public void Dispose()
    {
        objRef?.Dispose();
        JSRuntime.InvokeVoidAsync("dispose");
    }
}