<div class=@DivClass>
    @ChildContent
    @if (!string.IsNullOrEmpty(Src) && !imageError)
    {
        <img src="@Src"
             alt="@Alt"
             class=@(ImgClass + " h-full w-full object-cover shadow")
             @onload="OnImageLoad"
             @onerror="OnImageError"/>
    }
    else
    {
        <span class="p-4 text-center text-xs leading-relaxed font-bold break-words hyphens-auto text-[var(--color-text-muted)] md:text-xl">
            @((MarkupString)FallbackText)
        </span>
    }
</div>

@code {
    [Parameter]
    public string? Src { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter] 
    public string ImgClass { get; set; } = "";
    [Parameter]
    public string? Alt { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string FallbackText { get; set; } = "My photo coming soon";

    private bool imageError = false;

    private string DivClass =>
     $"{Class} " +
     $"flex items-center justify-center overflow-hidden rounded-md border border-[var(--color-border)] " +
     $"{(string.IsNullOrEmpty(Src) || imageError ? "bg-gradient-to-r from-[#261c2b] to-[#584d77]" : "")} ";

    private void OnImageLoad()
    {
        imageError = false;
        StateHasChanged();
    }

    private void OnImageError()
    {
        imageError = true;
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        // Reset error state when Src changes
        if (!string.IsNullOrEmpty(Src))
        {
            imageError = false;
        }
    }
}